1.
  1.1
    Dog, Cat, Bird inherits from Animal
    SiamiCat inherits from Cat
    Bulldog inherits from Dog

  1.2
    Yes, animal have no instance of it's own, but it can define group and behaviour.

2.	No, there is a known issue where class may inherits from two classes, each of which inherits from the same one.

3.	Yes, interfaces do not have implementation will not have an issue above.

4.	No, the method will be both accessible and unimplemented, which makes no sense.

5.	Yes, the implementation will be same in all derived classes, unless overriden.

6.	No (.Net version related?)

7.	Yes, all methods are public and abstract 
	No, interface enforces inheritors to implement these

8.
	public - accessible from everywhere, given the module is obtained.
	private - accessible only within the class, most restricting
	protected - accessible from class itself and classes that inherit it.
	internal - accesible from within the project and namespace

9.	No, it have implementation in case it is not overriden
	Yes, if inherited

10.	
	override
	overload
	neither, as it is impossible

11.	C (both)

12.	B (readonly)

13.	Non static class can and have to be instantiated

14.	If there are complicated calculations for static parameters of the class, inapropriate for inline init

15.	private string myName;
	public string MyName 
	{ 
		get { return myName; } 
		set { myName = value; }
	}

16.	Property adds easy way to manage access to variables.
	Property saves the use of setter/getter methods of variable.
	It is possible and sometimes encouraged to use get/private set pair

17.	Backing Field of the same type is created

18.	Yes, there are disassemblers(DotPeek, maybe others) to extract C# code.

19.	
	- stack
	- queue
	- list (meh)
	- dictionary

20.	Maybe because the original operator is in the class and original operator no longer available

21. 
	ToString - will use it to turn return class as string, often overriden
	GetType - Return the class of the instance calling it, not overriden
	Equals - Compare two objects and return similarity, can be overriden
	GetHashCode - Used for sorting, overriden for more control over duplications

22.	Virtual function encourages overriding, 
	ToString from the object will make little sense in many derived classes,
	GetType on the other hand will return the class that calls the method.

23.	IComparable

24.	IComparable, IEnumerable

25.	No, it is possible to create try-finally without catch
	If application throws another exception, eventually comes back to finally, it in in it's stack
	Maybe, if the crash is literal (ie application closes immediately), is left for OS to deal with.

